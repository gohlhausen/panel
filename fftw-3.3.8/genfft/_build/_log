### Starting build.
# Target: gen_notw.ml.depends, tags: { extension:ml, file:gen_notw.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_notw.ml > gen_notw.ml.depends
# Target: annotate.mli.depends, tags: { extension:mli, file:annotate.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules annotate.mli > annotate.mli.depends
# Target: expr.mli.depends, tags: { extension:mli, file:expr.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules expr.mli > expr.mli.depends
# Target: number.mli.depends, tags: { extension:mli, file:number.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules number.mli > number.mli.depends
# Target: variable.mli.depends, tags: { extension:mli, file:variable.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules variable.mli > variable.mli.depends
# Target: unique.mli.depends, tags: { extension:mli, file:unique.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules unique.mli > unique.mli.depends
# Target: unique.cmi, tags: { byte, compile, extension:mli, file:unique.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o unique.cmi unique.mli
# Target: number.cmi, tags: { byte, compile, extension:mli, file:number.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o number.cmi number.mli
# Target: variable.cmi, tags: { byte, compile, extension:mli, file:variable.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o variable.cmi variable.mli
# Target: schedule.mli.depends, tags: { extension:mli, file:schedule.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules schedule.mli > schedule.mli.depends
# Target: expr.cmi, tags: { byte, compile, extension:mli, file:expr.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o expr.cmi expr.mli
# Target: schedule.cmi, tags: { byte, compile, extension:mli, file:schedule.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o schedule.cmi schedule.mli
# Target: c.mli.depends, tags: { extension:mli, file:c.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules c.mli > c.mli.depends
# Target: annotate.cmi, tags: { byte, compile, extension:mli, file:annotate.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o annotate.cmi annotate.mli
# Target: fft.mli.depends, tags: { extension:mli, file:fft.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules fft.mli > fft.mli.depends
# Target: complex.mli.depends, tags: { extension:mli, file:complex.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules complex.mli > complex.mli.depends
# Target: complex.cmi, tags: { byte, compile, extension:mli, file:complex.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o complex.cmi complex.mli
# Target: genutil.ml.depends, tags: { extension:ml, file:genutil.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules genutil.ml > genutil.ml.depends
# Target: algsimp.mli.depends, tags: { extension:mli, file:algsimp.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules algsimp.mli > algsimp.mli.depends
# Target: c.cmi, tags: { byte, compile, extension:mli, file:c.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o c.cmi c.mli
# Target: magic.ml.depends, tags: { extension:ml, file:magic.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules magic.ml > magic.ml.depends
# Target: simd.mli.depends, tags: { extension:mli, file:simd.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules simd.mli > simd.mli.depends
# Target: simdmagic.ml.depends, tags: { extension:ml, file:simdmagic.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules simdmagic.ml > simdmagic.ml.depends
# Target: magic.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:magic.cmo, file:magic.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o magic.cmo magic.ml
# Target: to_alist.mli.depends, tags: { extension:mli, file:to_alist.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules to_alist.mli > to_alist.mli.depends
# Target: twiddle.mli.depends, tags: { extension:mli, file:twiddle.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules twiddle.mli > twiddle.mli.depends
# Target: util.mli.depends, tags: { extension:mli, file:util.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules util.mli > util.mli.depends
# Target: algsimp.cmi, tags: { byte, compile, extension:mli, file:algsimp.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o algsimp.cmi algsimp.mli
# Target: simd.cmi, tags: { byte, compile, extension:mli, file:simd.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o simd.cmi simd.mli
# Target: simdmagic.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:simdmagic.cmo, file:simdmagic.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o simdmagic.cmo simdmagic.ml
# Target: to_alist.cmi, tags: { byte, compile, extension:mli, file:to_alist.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o to_alist.cmi to_alist.mli
# Target: twiddle.cmi, tags: { byte, compile, extension:mli, file:twiddle.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o twiddle.cmi twiddle.mli
# Target: util.cmi, tags: { byte, compile, extension:mli, file:util.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o util.cmi util.mli
# Target: fft.cmi, tags: { byte, compile, extension:mli, file:fft.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o fft.cmi fft.mli
# Target: genutil.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:genutil.cmo, file:genutil.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o genutil.cmo genutil.ml
+ /usr/bin/ocamlc.opt -c -o genutil.cmo genutil.ml
File "genutil.ml", line 280, characters 15-30:
Warning 52: Code should not depend on the actual values of
this constructor's arguments. They are only for information
and may change in future versions. (See manual section 8.5)
# Target: gen_notw.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_notw.cmo, file:gen_notw.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_notw.cmo gen_notw.ml
# Target: annotate.ml.depends, tags: { extension:ml, file:annotate.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules annotate.ml > annotate.ml.depends
# Target: expr.ml.depends, tags: { extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules expr.ml > expr.ml.depends
# Target: number.ml.depends, tags: { extension:ml, file:number.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules number.ml > number.ml.depends
# Target: util.ml.depends, tags: { extension:ml, file:util.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules util.ml > util.ml.depends
# Target: magic.cmx, tags: { compile, extension:cmx, extension:ml, file:magic.cmx, file:magic.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o magic.cmx magic.ml
# Target: util.cmx, tags: { compile, extension:cmx, extension:ml, file:util.cmx, file:util.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o util.cmx util.ml
# Target: variable.ml.depends, tags: { extension:ml, file:variable.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules variable.ml > variable.ml.depends
# Target: unique.ml.depends, tags: { extension:ml, file:unique.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules unique.ml > unique.ml.depends
# Target: unique.cmx, tags: { compile, extension:cmx, extension:ml, file:unique.cmx, file:unique.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o unique.cmx unique.ml
# Target: number.cmx, tags: { compile, extension:cmx, extension:ml, file:number.cmx, file:number.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o number.cmx number.ml
# Target: variable.cmx, tags: { compile, extension:cmx, extension:ml, file:variable.cmx, file:variable.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o variable.cmx variable.ml
# Target: schedule.ml.depends, tags: { extension:ml, file:schedule.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules schedule.ml > schedule.ml.depends
# Target: dag.ml.depends, tags: { extension:ml, file:dag.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules dag.ml > dag.ml.depends
# Target: dag.mli.depends, tags: { extension:mli, file:dag.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules dag.mli > dag.mli.depends
# Target: dag.cmi, tags: { byte, compile, extension:mli, file:dag.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o dag.cmi dag.mli
# Target: expr.cmx, tags: { compile, extension:cmx, extension:ml, file:expr.cmx, file:expr.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o expr.cmx expr.ml
# Target: dag.cmx, tags: { compile, extension:cmx, extension:ml, file:dag.cmx, file:dag.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o dag.cmx dag.ml
# Target: schedule.cmx, tags: { compile, extension:cmx, extension:ml, file:schedule.cmx, file:schedule.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o schedule.cmx schedule.ml
# Target: c.ml.depends, tags: { extension:ml, file:c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules c.ml > c.ml.depends
# Target: annotate.cmx, tags: { compile, extension:cmx, extension:ml, file:annotate.cmx, file:annotate.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o annotate.cmx annotate.ml
+ /usr/bin/ocamlopt.opt -c -o annotate.cmx annotate.ml
File "annotate.ml", line 81, characters 3-12:
Warning 3: deprecated: Sort.list
Use List.sort instead.
# Target: to_alist.ml.depends, tags: { extension:ml, file:to_alist.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules to_alist.ml > to_alist.ml.depends
# Target: assoctable.ml.depends, tags: { extension:ml, file:assoctable.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules assoctable.ml > assoctable.ml.depends
# Target: assoctable.mli.depends, tags: { extension:mli, file:assoctable.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules assoctable.mli > assoctable.mli.depends
# Target: assoctable.cmi, tags: { byte, compile, extension:mli, file:assoctable.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o assoctable.cmi assoctable.mli
# Target: monads.ml.depends, tags: { extension:ml, file:monads.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules monads.ml > monads.ml.depends
# Target: monads.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:monads.cmo, file:monads.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o monads.cmo monads.ml
# Target: assoctable.cmx, tags: { compile, extension:cmx, extension:ml, file:assoctable.cmx, file:assoctable.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o assoctable.cmx assoctable.ml
# Target: monads.cmx, tags: { compile, extension:cmx, extension:ml, file:monads.cmx, file:monads.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o monads.cmx monads.ml
# Target: to_alist.cmx, tags: { compile, extension:cmx, extension:ml, file:to_alist.cmx, file:to_alist.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o to_alist.cmx to_alist.ml
# Target: fft.ml.depends, tags: { extension:ml, file:fft.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules fft.ml > fft.ml.depends
# Target: complex.ml.depends, tags: { extension:ml, file:complex.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules complex.ml > complex.ml.depends
# Target: littlesimp.ml.depends, tags: { extension:ml, file:littlesimp.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules littlesimp.ml > littlesimp.ml.depends
# Target: littlesimp.mli.depends, tags: { extension:mli, file:littlesimp.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules littlesimp.mli > littlesimp.mli.depends
# Target: littlesimp.cmi, tags: { byte, compile, extension:mli, file:littlesimp.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o littlesimp.cmi littlesimp.mli
# Target: littlesimp.cmx, tags: { compile, extension:cmx, extension:ml, file:littlesimp.cmx, file:littlesimp.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o littlesimp.cmx littlesimp.ml
# Target: complex.cmx, tags: { compile, extension:cmx, extension:ml, file:complex.cmx, file:complex.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o complex.cmx complex.ml
# Target: algsimp.ml.depends, tags: { extension:ml, file:algsimp.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules algsimp.ml > algsimp.ml.depends
# Target: oracle.ml.depends, tags: { extension:ml, file:oracle.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules oracle.ml > oracle.ml.depends
# Target: oracle.mli.depends, tags: { extension:mli, file:oracle.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules oracle.mli > oracle.mli.depends
# Target: oracle.cmi, tags: { byte, compile, extension:mli, file:oracle.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o oracle.cmi oracle.mli
# Target: oracle.cmx, tags: { compile, extension:cmx, extension:ml, file:oracle.cmx, file:oracle.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o oracle.cmx oracle.ml
# Target: c.cmx, tags: { compile, extension:cmx, extension:ml, file:c.cmx, file:c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o c.cmx c.ml
# Target: simd.ml.depends, tags: { extension:ml, file:simd.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules simd.ml > simd.ml.depends
# Target: simdmagic.cmx, tags: { compile, extension:cmx, extension:ml, file:simdmagic.cmx, file:simdmagic.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o simdmagic.cmx simdmagic.ml
# Target: twiddle.ml.depends, tags: { extension:ml, file:twiddle.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules twiddle.ml > twiddle.ml.depends
# Target: algsimp.cmx, tags: { compile, extension:cmx, extension:ml, file:algsimp.cmx, file:algsimp.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o algsimp.cmx algsimp.ml
# Target: simd.cmx, tags: { compile, extension:cmx, extension:ml, file:simd.cmx, file:simd.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o simd.cmx simd.ml
# Target: twiddle.cmx, tags: { compile, extension:cmx, extension:ml, file:twiddle.cmx, file:twiddle.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o twiddle.cmx twiddle.ml
# Target: fft.cmx, tags: { compile, extension:cmx, extension:ml, file:fft.cmx, file:fft.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o fft.cmx fft.ml
# Target: genutil.cmx, tags: { compile, extension:cmx, extension:ml, file:genutil.cmx, file:genutil.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o genutil.cmx genutil.ml
+ /usr/bin/ocamlopt.opt -c -o genutil.cmx genutil.ml
File "genutil.ml", line 280, characters 15-30:
Warning 52: Code should not depend on the actual values of
this constructor's arguments. They are only for information
and may change in future versions. (See manual section 8.5)
# Target: gen_notw.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_notw.cmx, file:gen_notw.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_notw.cmx gen_notw.ml
# Target: gen_notw.native, tags: { dont_link_with, extension:native, file:gen_notw.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_notw.cmx -o gen_notw.native
# Target: gen_notw_c.ml.depends, tags: { extension:ml, file:gen_notw_c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_notw_c.ml > gen_notw_c.ml.depends
# Target: trig.mli.depends, tags: { extension:mli, file:trig.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules trig.mli > trig.mli.depends
# Target: trig.cmi, tags: { byte, compile, extension:mli, file:trig.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o trig.cmi trig.mli
# Target: gen_notw_c.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_notw_c.cmo, file:gen_notw_c.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_notw_c.cmo gen_notw_c.ml
# Target: trig.ml.depends, tags: { extension:ml, file:trig.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules trig.ml > trig.ml.depends
# Target: trig.cmx, tags: { compile, extension:cmx, extension:ml, file:trig.cmx, file:trig.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o trig.cmx trig.ml
# Target: gen_notw_c.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_notw_c.cmx, file:gen_notw_c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_notw_c.cmx gen_notw_c.ml
# Target: gen_notw_c.native, tags: { dont_link_with, extension:native, file:gen_notw_c.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_notw_c.cmx -o gen_notw_c.native
# Target: gen_twiddle.ml.depends, tags: { extension:ml, file:gen_twiddle.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_twiddle.ml > gen_twiddle.ml.depends
# Target: gen_twiddle.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_twiddle.cmo, file:gen_twiddle.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_twiddle.cmo gen_twiddle.ml
# Target: gen_twiddle.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_twiddle.cmx, file:gen_twiddle.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_twiddle.cmx gen_twiddle.ml
# Target: gen_twiddle.native, tags: { dont_link_with, extension:native, file:gen_twiddle.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_twiddle.cmx -o gen_twiddle.native
# Target: gen_twiddle_c.ml.depends, tags: { extension:ml, file:gen_twiddle_c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_twiddle_c.ml > gen_twiddle_c.ml.depends
# Target: gen_twiddle_c.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_twiddle_c.cmo, file:gen_twiddle_c.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_twiddle_c.cmo gen_twiddle_c.ml
# Target: gen_twiddle_c.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_twiddle_c.cmx, file:gen_twiddle_c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_twiddle_c.cmx gen_twiddle_c.ml
# Target: gen_twiddle_c.native, tags: { dont_link_with, extension:native, file:gen_twiddle_c.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_twiddle_c.cmx -o gen_twiddle_c.native
# Target: gen_twidsq.ml.depends, tags: { extension:ml, file:gen_twidsq.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_twidsq.ml > gen_twidsq.ml.depends
# Target: gen_twidsq.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_twidsq.cmo, file:gen_twidsq.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_twidsq.cmo gen_twidsq.ml
# Target: gen_twidsq.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_twidsq.cmx, file:gen_twidsq.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_twidsq.cmx gen_twidsq.ml
# Target: gen_twidsq.native, tags: { dont_link_with, extension:native, file:gen_twidsq.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_twidsq.cmx -o gen_twidsq.native
# Target: gen_twidsq_c.ml.depends, tags: { extension:ml, file:gen_twidsq_c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_twidsq_c.ml > gen_twidsq_c.ml.depends
# Target: gen_twidsq_c.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_twidsq_c.cmo, file:gen_twidsq_c.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_twidsq_c.cmo gen_twidsq_c.ml
# Target: gen_twidsq_c.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_twidsq_c.cmx, file:gen_twidsq_c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_twidsq_c.cmx gen_twidsq_c.ml
# Target: gen_twidsq_c.native, tags: { dont_link_with, extension:native, file:gen_twidsq_c.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_twidsq_c.cmx -o gen_twidsq_c.native
# Target: gen_r2r.ml.depends, tags: { extension:ml, file:gen_r2r.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_r2r.ml > gen_r2r.ml.depends
# Target: gen_r2r.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_r2r.cmo, file:gen_r2r.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_r2r.cmo gen_r2r.ml
# Target: gen_r2r.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_r2r.cmx, file:gen_r2r.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_r2r.cmx gen_r2r.ml
# Target: gen_r2r.native, tags: { dont_link_with, extension:native, file:gen_r2r.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_r2r.cmx -o gen_r2r.native
# Target: gen_r2cf.ml.depends, tags: { extension:ml, file:gen_r2cf.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_r2cf.ml > gen_r2cf.ml.depends
# Target: gen_r2cf.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_r2cf.cmo, file:gen_r2cf.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_r2cf.cmo gen_r2cf.ml
# Target: gen_r2cf.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_r2cf.cmx, file:gen_r2cf.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_r2cf.cmx gen_r2cf.ml
# Target: gen_r2cf.native, tags: { dont_link_with, extension:native, file:gen_r2cf.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_r2cf.cmx -o gen_r2cf.native
# Target: gen_r2cb.ml.depends, tags: { extension:ml, file:gen_r2cb.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_r2cb.ml > gen_r2cb.ml.depends
# Target: gen_r2cb.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_r2cb.cmo, file:gen_r2cb.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_r2cb.cmo gen_r2cb.ml
# Target: gen_r2cb.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_r2cb.cmx, file:gen_r2cb.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_r2cb.cmx gen_r2cb.ml
# Target: gen_r2cb.native, tags: { dont_link_with, extension:native, file:gen_r2cb.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_r2cb.cmx -o gen_r2cb.native
# Target: gen_hc2c.ml.depends, tags: { extension:ml, file:gen_hc2c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_hc2c.ml > gen_hc2c.ml.depends
# Target: gen_hc2c.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_hc2c.cmo, file:gen_hc2c.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_hc2c.cmo gen_hc2c.ml
# Target: gen_hc2c.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_hc2c.cmx, file:gen_hc2c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_hc2c.cmx gen_hc2c.ml
# Target: gen_hc2c.native, tags: { dont_link_with, extension:native, file:gen_hc2c.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_hc2c.cmx -o gen_hc2c.native
# Target: gen_hc2cdft.ml.depends, tags: { extension:ml, file:gen_hc2cdft.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_hc2cdft.ml > gen_hc2cdft.ml.depends
# Target: gen_hc2cdft.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_hc2cdft.cmo, file:gen_hc2cdft.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_hc2cdft.cmo gen_hc2cdft.ml
# Target: gen_hc2cdft.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_hc2cdft.cmx, file:gen_hc2cdft.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_hc2cdft.cmx gen_hc2cdft.ml
# Target: gen_hc2cdft.native, tags: { dont_link_with, extension:native, file:gen_hc2cdft.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_hc2cdft.cmx -o gen_hc2cdft.native
# Target: gen_hc2cdft_c.ml.depends, tags: { extension:ml, file:gen_hc2cdft_c.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_hc2cdft_c.ml > gen_hc2cdft_c.ml.depends
# Target: gen_hc2cdft_c.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_hc2cdft_c.cmo, file:gen_hc2cdft_c.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_hc2cdft_c.cmo gen_hc2cdft_c.ml
# Target: gen_hc2cdft_c.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_hc2cdft_c.cmx, file:gen_hc2cdft_c.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_hc2cdft_c.cmx gen_hc2cdft_c.ml
# Target: gen_hc2cdft_c.native, tags: { dont_link_with, extension:native, file:gen_hc2cdft_c.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_hc2cdft_c.cmx -o gen_hc2cdft_c.native
# Target: gen_hc2hc.ml.depends, tags: { extension:ml, file:gen_hc2hc.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_hc2hc.ml > gen_hc2hc.ml.depends
# Target: gen_hc2hc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_hc2hc.cmo, file:gen_hc2hc.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_hc2hc.cmo gen_hc2hc.ml
# Target: gen_hc2hc.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_hc2hc.cmx, file:gen_hc2hc.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_hc2hc.cmx gen_hc2hc.ml
# Target: gen_hc2hc.native, tags: { dont_link_with, extension:native, file:gen_hc2hc.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx gen_hc2hc.cmx -o gen_hc2hc.native
# Target: gen_mdct.ml.depends, tags: { extension:ml, file:gen_mdct.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules gen_mdct.ml > gen_mdct.ml.depends
# Target: gen_mdct.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:gen_mdct.cmo, file:gen_mdct.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o gen_mdct.cmo gen_mdct.ml
# Target: gen_mdct.cmx, tags: { compile, extension:cmx, extension:ml, file:gen_mdct.cmx, file:gen_mdct.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o gen_mdct.cmx gen_mdct.ml
# Target: gen_mdct.native, tags: { dont_link_with, extension:native, file:gen_mdct.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt unix.cmxa nums.cmxa assoctable.cmx magic.cmx util.cmx number.cmx unique.cmx variable.cmx expr.cmx littlesimp.cmx monads.cmx oracle.cmx algsimp.cmx dag.cmx schedule.cmx annotate.cmx to_alist.cmx c.cmx complex.cmx fft.cmx simdmagic.cmx simd.cmx twiddle.cmx genutil.cmx trig.cmx gen_mdct.cmx -o gen_mdct.native
# Compilation successful.
